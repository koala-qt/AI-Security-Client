/**
 * @file
 *
 * @brief Header file containing definitions of toolkit error interfaces.
 */

#if !defined(Toolkits_ErrorInterface_h_INCLUDED)
#define Toolkits_ErrorInterface_h_INCLUDED

// Local headers
#include "Types.h"

// System headers
#include <exception>
#include <vector>


/* === Namespace =========================================================== */

namespace NmToolkit
{

  /* === Toolkit error interface =========================================== */

  /* --- ImToolkitError class ---------------------------------------------- */

  /**
   * @brief Base error interface of all toolkit errors.
   *
   * All errors generated by toolkits must implement this interface.
   */
  class ImToolkitError : public std::exception
  {
    public:
      /** @name Constructors and destructors */ //@{
      /**
       * The base class destructor (std::exception::~exception) is declared virtual which
       * automatically render the destructor of this derived class virtual, hence omitted.
       */
      //@}

      /** @name Get methods */ //@{
      /**
       * @brief Get the kind of error as a textual representation of the error interface, e.g. "ImNotSupportedError".
       *
       * @return The error interface name as string.
       */
      virtual utf8_string_t GetKind() const = 0;

      /**
       * @brief Get the error code value.
       *
       * @return Error code as an unsigned integer which is related to the kind of error.
       */
      virtual unsigned int GetCode() const = 0;

      /**
       * @brief Get the error arguments of export error.
       *
       * @return Vector of error arguments encoded as UTF-8 strings.
       */
      virtual std::vector<utf8_string_t> GetArguments() const = 0;

      /**
       * @brief Get a message that describes the error.
       *
       * Note that the returned string is not localized. It will
       * typically be in English but can in general be a mixture of
       * languages. Only use this description for debugging purposes.
       *
       * @return String describing what error occurred and why it happened.
       */
      virtual utf8_string_t GetDescription() const = 0;

      /**
       * @brief Get the toolkit specific error cause.
       *
       * If specified this will return a more detailed error reason but will also
       * require some knowledge of the underlying toolkit.
       *
       * @return The toolkit specific error cause. If this is not defined
       *         the empty string will be returned.
       */
      virtual utf8_string_t GetErrorCause() const = 0;

      /**
       * @brief Get the complete toolkit error string.
       *
       * If specified this will return a complete error string containing the 
       * error description and the error cause. It will then be called recursively
       * on the specific error (if any).
       *
       * @return The complete error description for this error.
       */
      virtual utf8_string_t GetCompleteErrorDescription() const = 0;

      /**
       * @brief Get error description UTF-8 encoded (inherited from std::exception).
       *
       * @return Explanatory error string UTF-8 encoded.
       */
      inline const char* what() const throw()
      {
        return GetDescription().c_str();
      }

      /**
       * @brief Get the specific error embedded in this error. This is defined
       *        as an toolkit error thrown from a lower level which caused
       *        the current error to be thrown.
       *
       * @return Pointer to specific error object. Null if no specific error is available.
       * @see GetErrorCause(), GetCompleteErrorDescription()
       */
      virtual const ImToolkitError* GetSpecificError() const = 0;

      /** @name Clone method */ //@{
      /**
       * @brief Creates a deep copy of this toolkit error object.
       *
       * @return A deep copy of the toolkit error object.
       */
      virtual ImToolkitError* Clone() const = 0;
      //@}
  };


  /* --- ImInvalidArgumentError class -------------------------------------- */

  /**
   * @brief Invalid argument error interface.
   *
   * This error occurs when the parameter of a method is invalid.
   */
  class ImInvalidArgumentError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_INVALID_TYPE,                   ///< Invalid type.
        ERROR_INVALID_VALUE,                  ///< Invalid argument value.
        ERROR_MISSING_VALUE                   ///< A value is missing.
      };
  };


  /* --- ImNotSupportedError class ----------------------------------------- */

  /**
   * @brief Not supported error interface.
   *
   * This error occurs if attempting to do an operation that is not
   * supported.
   *
   * For scenarios where it is sometimes possible for to perform the
   * requested operation, and the object state determines whether the
   * operation can be performed, @see ImInvalidOperationError.
   */
  class ImNotSupportedError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_METHOD_NOT_IMPLEMENTED,   ///< The called method is not implemented.
        ERROR_SETTING_NOT_SUPPORTED,    ///< The requested setting is not supported.
        ERROR_CODEC_NOT_SUPPORTED,      ///< The codec is not supported by the particular implementation
        ERROR_HARDWARE_NOT_SUPPORTED    ///< The hardware does not support the requested operation.
      };
  };


  /* --- ImInvalidOperationError class ------------------------------------- */

  /**
   * @brief Invalid operation error interface.
   *
   * This error occurs when a method is called in an invalid toolkit
   * state. That is, in cases when the failure to call a method is
   * caused by reasons other than invalid arguments.
   */
  class ImInvalidOperationError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_METHOD_COULD_NOT_BE_PERFORMED,   ///< The requested operation cannot be performed in the current context.
        ERROR_NOT_ALLOWED_IN_LIVE_MODE,        ///< The requested operation is not allowed in live mode.
        ERROR_NOT_ALLOWED_IN_PLAYBACK_MODE     ///< The requested operation is not allowed in playback mode.
      };
  };


  /* --- ImFileError class ------------------------------------------------- */

  /**
   * @brief File error interface.
   *
   * A file error is thrown when a file or directory operation fails.
   */
  class ImFileError : public ImToolkitError  
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_NOT_A_FILE,                  ///< Specified name is not a file.
        ERROR_NOT_A_DIRECTORY,             ///< Specified name is not a directory.
        ERROR_GETTING_SIZE_OF_FILE,        ///< Error getting size of file.
        ERROR_GETTING_SIZE_OF_DIRECTORY,   ///< Error getting size of directory.
        ERROR_GETTING_FILESYSTEM_STATUS,   ///< Error getting filesystem status.
        ERROR_GETTING_TIME_STAMP_OF_FILE,  ///< Error getting time stamp of file.
        ERROR_OPENING_FILE,                ///< Error opening file.
        ERROR_TOUCHING_FILE,               ///< Error touching file.
        ERROR_MOVING_FILE,                 ///< Error moving file.
        ERROR_COPYING_FILE,                ///< Error copying file.
        ERROR_TRUNCATING_FILE,             ///< Error truncating file.
        ERROR_DELETING_FILE,               ///< Error deleting file.
        ERROR_OVERWRITING_FILE,            ///< Error overwriting file.
        ERROR_MODIFYING_ACCESS_RIGHTS,     ///< Error modifying access rights of file.
        ERROR_READING_FROM_FILE,           ///< Error reading from file.
        ERROR_WRITING_TO_FILE,             ///< Error writing to file.
        ERROR_LISTING_DIRECTORY,           ///< Error listing directory.
        ERROR_MAKING_DIRECTORY,            ///< Error making directory.
        ERROR_MOVING_DIRECTORY,            ///< Error moving directory.
        ERROR_COPYING_DIRECTORY,           ///< Error copying directory.
        ERROR_REMOVING_DIRECTORY,          ///< Error removing directory.
        ERROR_MAXIMUM_FILE_SIZE_EXCEEDED,  ///< The maximum allowed file size is exceeded.
        ERROR_CLOSING_FILE                 ///< Error closing file.
      };
  };


  /* --- ImConfigurationError class ---------------------------------------- */

  /**
   * @brief Configuration error interface.
   *
   * This error occurs if the toolkit factory cannot create an
   * instance of a toolkit because of an configuration error.
   */
  class ImConfigurationError : public ImToolkitError
  {
  public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_PARSING_XML,              ///< The configuration xml could not be parsed.
        ERROR_MISSING_TOOLKIT_TYPE,     ///< The toolkit type element was missing.
        ERROR_MISSING_TOOLKIT_PROVIDER  ///< The toolkit provider type element was missing.
      };
  };


  /* --- ImNotConnectedError class ----------------------------------------- */

  /**
   * @brief Not connected error interface.
   *
   * This error occurs if attempting to work with an object that
   * requires a connection which has not been established or has been
   * lost.
   */
  class ImNotConnectedError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_UNABLE_TO_CONNECT,           ///< Unable to establish connection.
        ERROR_CONNECTION_NOT_ESTABLISHED,  ///< The connection is not established.
//TODO: Below exception error code has been obsoleted by ImBreakError!
        ERROR_OPERATION_CANCELLED          ///< The operation was cancelled.
      };
  };


  /* --- ImBreakError class ------------------------------------------------ */

  /**
   * @brief Break error interface.
   *
   * This error occurs if break of a blocking operation has been requested.
   *
   * @see ImToolkit::Break().
   */
  class ImBreakError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_BREAK_REQUESTED       ///< The blocking operation broke due to a break request.
      };
  };


  /* --- ImAuthorizationError class ---------------------------------------- */

  /**
   * @brief Authorization error interface.
   *
   * This error occurs if an operation fails with an authorization issue.
   */
  class ImAuthorizationError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_AUTHORIZATION_METHOD_NOT_SUPPORTED,  ///< The requested authorization method is not supported.
        ERROR_INVALID_CREDENTIALS,                 ///< The supplied authorization credentials are not valid.
        ERROR_TOKEN_EXPIRED                        ///< The supplied token has expired on the server.
      };
  };


  /* --- ImStreamError class ----------------------------------------------- */

  /**
   * @brief Stream error interface.
   *
   * A stream error is thrown when stream read or write operations fail.
   */
  class ImStreamError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_STREAM_READ,                  ///< Unable to read from the stream.
        ERROR_STREAM_POSITIONING_CURSOR,    ///< Unable to position stream cursor.
        ERROR_STREAM_INITIALIZING_LIVE,     ///< Unable to initialize live.
        ERROR_STREAM_WRITE                  ///< Unable to write to the stream.
      };
  };


  /* --- ImSigningError class ---------------------------------------------- */

  /**
   * @brief Signing error interface.
   *
   * A signing error is thrown when processing signatures fails.
   */
  class ImSigningError : public ImToolkitError
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_SIGNING_VERIFICATION_FAILED  ///< Verification of signature failed.
      };
  };


  /* --- ImEncoderError class ---------------------------------------------- */

  /**
   * @brief Encoder error interface.
   *
   * An encoder error is thrown when an encoding operation fails.
   */
  class ImEncoderError : public ImToolkitError  
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_INITIALIZING_ENCODER,       ///< Failed to intialize encoder subsystem.
        ERROR_EMPTY_OR_INVALID_STREAM,    ///< The stream to encode is empty or invalid.
        ERROR_STREAM_ALREADY_OPEN,        ///< The stream to encode is already open.
        ERROR_APPLYING_SETTING            ///< Unable to apply the requested setting on the encoder subsystem.
      };
  };


  /* --- ImDecoderError class ---------------------------------------------- */

  /**
   * @brief Decoder error interface.
   *
   * A decoder error is thrown when an decoding operation fails.
   */
  class ImDecoderError : public ImToolkitError  
  {
    public:
      /**
      * @brief Enumeration of all possible error codes.
      */
      enum errorcode_t
      {
        ERROR_INITIALIZING_DECODER,       ///< Failed to intialize decoder subsystem.
        ERROR_EMPTY_OR_INVALID_STREAM,    ///< The stream to decode is empty or invalid.
        ERROR_STREAM_ALREADY_OPEN,        ///< The stream to decode is already open.
        ERROR_APPLYING_SETTING            ///< Unable to apply the requested setting on the decoder subsystem.
      };
  };


  /* --- ImToolkitIntegrityError ------------------------------------------- */

  /**
   * @brief Toolkit integrity error interface.
   *
   * A toolkit integrity error is thrown in place of an assert in release mode. 
   * That is when a the toolkit is prevented from continued operation
   * due to wrong use or an unrepairable external event.
   */
  class ImToolkitIntegrityError : public ImToolkitError
  {
    public:
      /**
       * @brief Enumeration of all possible error codes.
       */
      enum errorcode_t
      {
        ERROR_UNSPECIFIED_ERROR   ///< An unspecified error happened.
      };
  };
}

#endif // Toolkits_ErrorInterface_h_INCLUDED
