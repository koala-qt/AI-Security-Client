// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FaceServ.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class FaceServHandler : virtual public FaceServIf {
 public:
  FaceServHandler() {
    // Your initialization goes here
  }

  void getFacePic(std::string& _return, const std::string& oid) {
    // Your implementation goes here
    printf("getFacePic\n");
  }

  void getScenePic(ScenePic& _return, const std::string& oid) {
    // Your implementation goes here
    printf("getScenePic\n");
  }

  void getAlarmScenePic(ScenePic& _return, const std::string& oid) {
    // Your implementation goes here
    printf("getAlarmScenePic\n");
  }

  void snapHistory(std::vector<SnapFaceHis> & _return, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap) {
    // Your implementation goes here
    printf("snapHistory\n");
  }

  void pagenateSnapHistory(PagedSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap) {
    // Your implementation goes here
    printf("pagenateSnapHistory\n");
  }

  void pagenateAlarmHistory(PagedAlarmHis& _return, const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap) {
    // Your implementation goes here
    printf("pagenateAlarmHistory\n");
  }

  void getStatisTask(std::vector<StatisTask> & _return) {
    // Your implementation goes here
    printf("getStatisTask\n");
  }

  bool addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id) {
    // Your implementation goes here
    printf("addStatisTask\n");
  }

  bool deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id) {
    // Your implementation goes here
    printf("deleteStatisTask\n");
  }

  void getAlarmArea(Area& _return, const std::string& camera_id) {
    // Your implementation goes here
    printf("getAlarmArea\n");
  }

  bool setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area) {
    // Your implementation goes here
    printf("setAlarmArea\n");
  }

  void searchSnap(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap) {
    // Your implementation goes here
    printf("searchSnap\n");
  }

  void pagenateSearchFaceSnap(PageSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap) {
    // Your implementation goes here
    printf("pagenateSearchFaceSnap\n");
  }

  void gnerateFaceTrace(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap) {
    // Your implementation goes here
    printf("gnerateFaceTrace\n");
  }

  void generateFaceLink(FaceLink& _return, const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap) {
    // Your implementation goes here
    printf("generateFaceLink\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<FaceServHandler> handler(new FaceServHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new FaceServProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

