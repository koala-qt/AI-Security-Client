/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef face_TYPES_H
#define face_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct AreaType {
  enum type {
    FORBIDDENZONE = 0,
    ABDOOR = 1
  };
};

extern const std::map<int, const char*> _AreaType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AreaType::type& val);

class FaceInfo;

class ScenePic;

class CameraInfo;

class SnapFaceHis;

class PagedSnapFaceHis;

class StatisTask;

class FaceStatistics;

class Point;

class AlarmHis;

class PagedAlarmHis;

class Area;

class SearchFace;

class FaceLink;

class PageSnapFaceHis;

typedef struct _FaceInfo__isset {
  _FaceInfo__isset() : sno(false), sname(false), ssex(false), sage(false), faceimg(false) {}
  bool sno :1;
  bool sname :1;
  bool ssex :1;
  bool sage :1;
  bool faceimg :1;
} _FaceInfo__isset;

class FaceInfo : public virtual ::apache::thrift::TBase {
 public:

  FaceInfo(const FaceInfo&);
  FaceInfo& operator=(const FaceInfo&);
  FaceInfo() : sno(0), sname(), ssex(), sage(0), faceimg() {
  }

  virtual ~FaceInfo() throw();
  int32_t sno;
  std::string sname;
  std::string ssex;
  int16_t sage;
  std::string faceimg;

  _FaceInfo__isset __isset;

  void __set_sno(const int32_t val);

  void __set_sname(const std::string& val);

  void __set_ssex(const std::string& val);

  void __set_sage(const int16_t val);

  void __set_faceimg(const std::string& val);

  bool operator == (const FaceInfo & rhs) const
  {
    if (!(sno == rhs.sno))
      return false;
    if (!(sname == rhs.sname))
      return false;
    if (!(ssex == rhs.ssex))
      return false;
    if (!(sage == rhs.sage))
      return false;
    if (!(faceimg == rhs.faceimg))
      return false;
    return true;
  }
  bool operator != (const FaceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FaceInfo &a, FaceInfo &b);

std::ostream& operator<<(std::ostream& out, const FaceInfo& obj);

typedef struct _ScenePic__isset {
  _ScenePic__isset() : scene_img(false) {}
  bool scene_img :1;
} _ScenePic__isset;

class ScenePic : public virtual ::apache::thrift::TBase {
 public:

  ScenePic(const ScenePic&);
  ScenePic& operator=(const ScenePic&);
  ScenePic() : scene_img() {
  }

  virtual ~ScenePic() throw();
  std::string scene_img;

  _ScenePic__isset __isset;

  void __set_scene_img(const std::string& val);

  bool operator == (const ScenePic & rhs) const
  {
    if (!(scene_img == rhs.scene_img))
      return false;
    return true;
  }
  bool operator != (const ScenePic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScenePic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScenePic &a, ScenePic &b);

std::ostream& operator<<(std::ostream& out, const ScenePic& obj);

typedef struct _CameraInfo__isset {
  _CameraInfo__isset() : id(false), position(false), rtsp(false), dvr_ip(false), dvr_port(false), dvr_user(false), dvr_password(false), dvr_channel(false) {}
  bool id :1;
  bool position :1;
  bool rtsp :1;
  bool dvr_ip :1;
  bool dvr_port :1;
  bool dvr_user :1;
  bool dvr_password :1;
  bool dvr_channel :1;
} _CameraInfo__isset;

class CameraInfo : public virtual ::apache::thrift::TBase {
 public:

  CameraInfo(const CameraInfo&);
  CameraInfo& operator=(const CameraInfo&);
  CameraInfo() : id(), position(), rtsp(), dvr_ip(), dvr_port(0), dvr_user(), dvr_password(), dvr_channel(0) {
  }

  virtual ~CameraInfo() throw();
  std::string id;
  std::string position;
  std::string rtsp;
  std::string dvr_ip;
  int32_t dvr_port;
  std::string dvr_user;
  std::string dvr_password;
  int32_t dvr_channel;

  _CameraInfo__isset __isset;

  void __set_id(const std::string& val);

  void __set_position(const std::string& val);

  void __set_rtsp(const std::string& val);

  void __set_dvr_ip(const std::string& val);

  void __set_dvr_port(const int32_t val);

  void __set_dvr_user(const std::string& val);

  void __set_dvr_password(const std::string& val);

  void __set_dvr_channel(const int32_t val);

  bool operator == (const CameraInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(rtsp == rhs.rtsp))
      return false;
    if (!(dvr_ip == rhs.dvr_ip))
      return false;
    if (!(dvr_port == rhs.dvr_port))
      return false;
    if (!(dvr_user == rhs.dvr_user))
      return false;
    if (!(dvr_password == rhs.dvr_password))
      return false;
    if (!(dvr_channel == rhs.dvr_channel))
      return false;
    return true;
  }
  bool operator != (const CameraInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CameraInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CameraInfo &a, CameraInfo &b);

std::ostream& operator<<(std::ostream& out, const CameraInfo& obj);

typedef struct _SnapFaceHis__isset {
  _SnapFaceHis__isset() : oid(false), cameraid(false), camera_pos(false), faceimg(false), time(false) {}
  bool oid :1;
  bool cameraid :1;
  bool camera_pos :1;
  bool faceimg :1;
  bool time :1;
} _SnapFaceHis__isset;

class SnapFaceHis : public virtual ::apache::thrift::TBase {
 public:

  SnapFaceHis(const SnapFaceHis&);
  SnapFaceHis& operator=(const SnapFaceHis&);
  SnapFaceHis() : oid(), cameraid(), camera_pos(), faceimg(), time(0) {
  }

  virtual ~SnapFaceHis() throw();
  std::string oid;
  std::string cameraid;
  std::string camera_pos;
  std::string faceimg;
  int64_t time;

  _SnapFaceHis__isset __isset;

  void __set_oid(const std::string& val);

  void __set_cameraid(const std::string& val);

  void __set_camera_pos(const std::string& val);

  void __set_faceimg(const std::string& val);

  void __set_time(const int64_t val);

  bool operator == (const SnapFaceHis & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(cameraid == rhs.cameraid))
      return false;
    if (!(camera_pos == rhs.camera_pos))
      return false;
    if (!(faceimg == rhs.faceimg))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const SnapFaceHis &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnapFaceHis & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnapFaceHis &a, SnapFaceHis &b);

std::ostream& operator<<(std::ostream& out, const SnapFaceHis& obj);

typedef struct _PagedSnapFaceHis__isset {
  _PagedSnapFaceHis__isset() : total_page(false), total_count(false), snap_face_his(false) {}
  bool total_page :1;
  bool total_count :1;
  bool snap_face_his :1;
} _PagedSnapFaceHis__isset;

class PagedSnapFaceHis : public virtual ::apache::thrift::TBase {
 public:

  PagedSnapFaceHis(const PagedSnapFaceHis&);
  PagedSnapFaceHis& operator=(const PagedSnapFaceHis&);
  PagedSnapFaceHis() : total_page(0), total_count(0) {
  }

  virtual ~PagedSnapFaceHis() throw();
  int32_t total_page;
  int32_t total_count;
  std::vector<SnapFaceHis>  snap_face_his;

  _PagedSnapFaceHis__isset __isset;

  void __set_total_page(const int32_t val);

  void __set_total_count(const int32_t val);

  void __set_snap_face_his(const std::vector<SnapFaceHis> & val);

  bool operator == (const PagedSnapFaceHis & rhs) const
  {
    if (!(total_page == rhs.total_page))
      return false;
    if (!(total_count == rhs.total_count))
      return false;
    if (!(snap_face_his == rhs.snap_face_his))
      return false;
    return true;
  }
  bool operator != (const PagedSnapFaceHis &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PagedSnapFaceHis & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PagedSnapFaceHis &a, PagedSnapFaceHis &b);

std::ostream& operator<<(std::ostream& out, const PagedSnapFaceHis& obj);

typedef struct _StatisTask__isset {
  _StatisTask__isset() : start_camera_id(false), end_camera_id(false), start_camera_pos(false), end_camera_pos(false) {}
  bool start_camera_id :1;
  bool end_camera_id :1;
  bool start_camera_pos :1;
  bool end_camera_pos :1;
} _StatisTask__isset;

class StatisTask : public virtual ::apache::thrift::TBase {
 public:

  StatisTask(const StatisTask&);
  StatisTask& operator=(const StatisTask&);
  StatisTask() : start_camera_id(), end_camera_id(), start_camera_pos(), end_camera_pos() {
  }

  virtual ~StatisTask() throw();
  std::string start_camera_id;
  std::string end_camera_id;
  std::string start_camera_pos;
  std::string end_camera_pos;

  _StatisTask__isset __isset;

  void __set_start_camera_id(const std::string& val);

  void __set_end_camera_id(const std::string& val);

  void __set_start_camera_pos(const std::string& val);

  void __set_end_camera_pos(const std::string& val);

  bool operator == (const StatisTask & rhs) const
  {
    if (!(start_camera_id == rhs.start_camera_id))
      return false;
    if (!(end_camera_id == rhs.end_camera_id))
      return false;
    if (!(start_camera_pos == rhs.start_camera_pos))
      return false;
    if (!(end_camera_pos == rhs.end_camera_pos))
      return false;
    return true;
  }
  bool operator != (const StatisTask &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisTask & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StatisTask &a, StatisTask &b);

std::ostream& operator<<(std::ostream& out, const StatisTask& obj);

typedef struct _FaceStatistics__isset {
  _FaceStatistics__isset() : snap_total(false), today_total(false) {}
  bool snap_total :1;
  bool today_total :1;
} _FaceStatistics__isset;

class FaceStatistics : public virtual ::apache::thrift::TBase {
 public:

  FaceStatistics(const FaceStatistics&);
  FaceStatistics& operator=(const FaceStatistics&);
  FaceStatistics() : snap_total(0), today_total(0) {
  }

  virtual ~FaceStatistics() throw();
  int32_t snap_total;
  int32_t today_total;

  _FaceStatistics__isset __isset;

  void __set_snap_total(const int32_t val);

  void __set_today_total(const int32_t val);

  bool operator == (const FaceStatistics & rhs) const
  {
    if (!(snap_total == rhs.snap_total))
      return false;
    if (!(today_total == rhs.today_total))
      return false;
    return true;
  }
  bool operator != (const FaceStatistics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceStatistics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FaceStatistics &a, FaceStatistics &b);

std::ostream& operator<<(std::ostream& out, const FaceStatistics& obj);

typedef struct _Point__isset {
  _Point__isset() : x(false), y(false) {}
  bool x :1;
  bool y :1;
} _Point__isset;

class Point : public virtual ::apache::thrift::TBase {
 public:

  Point(const Point&);
  Point& operator=(const Point&);
  Point() : x(0), y(0) {
  }

  virtual ~Point() throw();
  int32_t x;
  int32_t y;

  _Point__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Point &a, Point &b);

std::ostream& operator<<(std::ostream& out, const Point& obj);

typedef struct _AlarmHis__isset {
  _AlarmHis__isset() : oid(false), camera_id(false), camera_pos(false), alarm_type(false), alarm_img(false), time(false) {}
  bool oid :1;
  bool camera_id :1;
  bool camera_pos :1;
  bool alarm_type :1;
  bool alarm_img :1;
  bool time :1;
} _AlarmHis__isset;

class AlarmHis : public virtual ::apache::thrift::TBase {
 public:

  AlarmHis(const AlarmHis&);
  AlarmHis& operator=(const AlarmHis&);
  AlarmHis() : oid(), camera_id(), camera_pos(), alarm_type(), alarm_img(), time(0) {
  }

  virtual ~AlarmHis() throw();
  std::string oid;
  std::string camera_id;
  std::string camera_pos;
  std::string alarm_type;
  std::string alarm_img;
  int64_t time;

  _AlarmHis__isset __isset;

  void __set_oid(const std::string& val);

  void __set_camera_id(const std::string& val);

  void __set_camera_pos(const std::string& val);

  void __set_alarm_type(const std::string& val);

  void __set_alarm_img(const std::string& val);

  void __set_time(const int64_t val);

  bool operator == (const AlarmHis & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(camera_pos == rhs.camera_pos))
      return false;
    if (!(alarm_type == rhs.alarm_type))
      return false;
    if (!(alarm_img == rhs.alarm_img))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const AlarmHis &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlarmHis & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlarmHis &a, AlarmHis &b);

std::ostream& operator<<(std::ostream& out, const AlarmHis& obj);

typedef struct _PagedAlarmHis__isset {
  _PagedAlarmHis__isset() : total_page(false), total_count(false), alarm_his(false) {}
  bool total_page :1;
  bool total_count :1;
  bool alarm_his :1;
} _PagedAlarmHis__isset;

class PagedAlarmHis : public virtual ::apache::thrift::TBase {
 public:

  PagedAlarmHis(const PagedAlarmHis&);
  PagedAlarmHis& operator=(const PagedAlarmHis&);
  PagedAlarmHis() : total_page(0), total_count(0) {
  }

  virtual ~PagedAlarmHis() throw();
  int32_t total_page;
  int32_t total_count;
  std::vector<AlarmHis>  alarm_his;

  _PagedAlarmHis__isset __isset;

  void __set_total_page(const int32_t val);

  void __set_total_count(const int32_t val);

  void __set_alarm_his(const std::vector<AlarmHis> & val);

  bool operator == (const PagedAlarmHis & rhs) const
  {
    if (!(total_page == rhs.total_page))
      return false;
    if (!(total_count == rhs.total_count))
      return false;
    if (!(alarm_his == rhs.alarm_his))
      return false;
    return true;
  }
  bool operator != (const PagedAlarmHis &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PagedAlarmHis & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PagedAlarmHis &a, PagedAlarmHis &b);

std::ostream& operator<<(std::ostream& out, const PagedAlarmHis& obj);

typedef struct _Area__isset {
  _Area__isset() : points(false), area_type(false) {}
  bool points :1;
  bool area_type :1;
} _Area__isset;

class Area : public virtual ::apache::thrift::TBase {
 public:

  Area(const Area&);
  Area& operator=(const Area&);
  Area() : area_type((AreaType::type)0) {
  }

  virtual ~Area() throw();
  std::vector<Point>  points;
  AreaType::type area_type;

  _Area__isset __isset;

  void __set_points(const std::vector<Point> & val);

  void __set_area_type(const AreaType::type val);

  bool operator == (const Area & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    if (!(area_type == rhs.area_type))
      return false;
    return true;
  }
  bool operator != (const Area &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Area & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Area &a, Area &b);

std::ostream& operator<<(std::ostream& out, const Area& obj);

typedef struct _SearchFace__isset {
  _SearchFace__isset() : oid(false), camera_id(false), camera_pos(false), score(false), face_img(false), time(false) {}
  bool oid :1;
  bool camera_id :1;
  bool camera_pos :1;
  bool score :1;
  bool face_img :1;
  bool time :1;
} _SearchFace__isset;

class SearchFace : public virtual ::apache::thrift::TBase {
 public:

  SearchFace(const SearchFace&);
  SearchFace& operator=(const SearchFace&);
  SearchFace() : oid(), camera_id(), camera_pos(), score(0), face_img(), time(0) {
  }

  virtual ~SearchFace() throw();
  std::string oid;
  std::string camera_id;
  std::string camera_pos;
  double score;
  std::string face_img;
  int64_t time;

  _SearchFace__isset __isset;

  void __set_oid(const std::string& val);

  void __set_camera_id(const std::string& val);

  void __set_camera_pos(const std::string& val);

  void __set_score(const double val);

  void __set_face_img(const std::string& val);

  void __set_time(const int64_t val);

  bool operator == (const SearchFace & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(camera_pos == rhs.camera_pos))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(face_img == rhs.face_img))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const SearchFace &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchFace & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchFace &a, SearchFace &b);

std::ostream& operator<<(std::ostream& out, const SearchFace& obj);

typedef struct _FaceLink__isset {
  _FaceLink__isset() : node_oids(false), link_oids(false) {}
  bool node_oids :1;
  bool link_oids :1;
} _FaceLink__isset;

class FaceLink : public virtual ::apache::thrift::TBase {
 public:

  FaceLink(const FaceLink&);
  FaceLink& operator=(const FaceLink&);
  FaceLink() {
  }

  virtual ~FaceLink() throw();
  std::vector<std::string>  node_oids;
  std::vector<std::vector<std::string> >  link_oids;

  _FaceLink__isset __isset;

  void __set_node_oids(const std::vector<std::string> & val);

  void __set_link_oids(const std::vector<std::vector<std::string> > & val);

  bool operator == (const FaceLink & rhs) const
  {
    if (!(node_oids == rhs.node_oids))
      return false;
    if (!(link_oids == rhs.link_oids))
      return false;
    return true;
  }
  bool operator != (const FaceLink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceLink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FaceLink &a, FaceLink &b);

std::ostream& operator<<(std::ostream& out, const FaceLink& obj);

typedef struct _PageSnapFaceHis__isset {
  _PageSnapFaceHis__isset() : session_id(false), snap_face_his(false) {}
  bool session_id :1;
  bool snap_face_his :1;
} _PageSnapFaceHis__isset;

class PageSnapFaceHis : public virtual ::apache::thrift::TBase {
 public:

  PageSnapFaceHis(const PageSnapFaceHis&);
  PageSnapFaceHis& operator=(const PageSnapFaceHis&);
  PageSnapFaceHis() : session_id() {
  }

  virtual ~PageSnapFaceHis() throw();
  std::string session_id;
  std::vector<SnapFaceHis>  snap_face_his;

  _PageSnapFaceHis__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snap_face_his(const std::vector<SnapFaceHis> & val);

  bool operator == (const PageSnapFaceHis & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snap_face_his == rhs.snap_face_his))
      return false;
    return true;
  }
  bool operator != (const PageSnapFaceHis &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageSnapFaceHis & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PageSnapFaceHis &a, PageSnapFaceHis &b);

std::ostream& operator<<(std::ostream& out, const PageSnapFaceHis& obj);



#endif
