/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FaceServ_H
#define FaceServ_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "face_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FaceServIf {
 public:
  virtual ~FaceServIf() {}
  virtual void getFacePic(std::string& _return, const std::string& oid) = 0;
  virtual void getScenePic(ScenePic& _return, const std::string& oid) = 0;
  virtual void getAlarmScenePic(ScenePic& _return, const std::string& oid) = 0;
  virtual void snapHistory(std::vector<SnapFaceHis> & _return, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap) = 0;
  virtual void pagenateSnapHistory(PagedSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap) = 0;
  virtual void pagenateAlarmHistory(PagedAlarmHis& _return, const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap) = 0;
  virtual void getStatisTask(std::vector<StatisTask> & _return) = 0;
  virtual bool addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id) = 0;
  virtual bool deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id) = 0;
  virtual void getAlarmArea(Area& _return, const std::string& camera_id) = 0;
  virtual bool setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area) = 0;
  virtual void searchSnap(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap) = 0;
  virtual void pagenateSearchFaceSnap(PageSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap) = 0;
  virtual void gnerateFaceTrace(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap) = 0;
  virtual void generateFaceLink(FaceLink& _return, const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap) = 0;
};

class FaceServIfFactory {
 public:
  typedef FaceServIf Handler;

  virtual ~FaceServIfFactory() {}

  virtual FaceServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FaceServIf* /* handler */) = 0;
};

class FaceServIfSingletonFactory : virtual public FaceServIfFactory {
 public:
  FaceServIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FaceServIf>& iface) : iface_(iface) {}
  virtual ~FaceServIfSingletonFactory() {}

  virtual FaceServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FaceServIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FaceServIf> iface_;
};

class FaceServNull : virtual public FaceServIf {
 public:
  virtual ~FaceServNull() {}
  void getFacePic(std::string& /* _return */, const std::string& /* oid */) {
    return;
  }
  void getScenePic(ScenePic& /* _return */, const std::string& /* oid */) {
    return;
  }
  void getAlarmScenePic(ScenePic& /* _return */, const std::string& /* oid */) {
    return;
  }
  void snapHistory(std::vector<SnapFaceHis> & /* _return */, const std::string& /* cameraid */, const int64_t /* start_timestap */, const int64_t /* end_timstap */) {
    return;
  }
  void pagenateSnapHistory(PagedSnapFaceHis& /* _return */, const int32_t /* page */, const int32_t /* num */, const std::string& /* cameraid */, const int64_t /* start_timestap */, const int64_t /* end_timstap */) {
    return;
  }
  void pagenateAlarmHistory(PagedAlarmHis& /* _return */, const int32_t /* page */, const int32_t /* num */, const std::string& /* camera_id */, const std::string& /* alarm_type */, const int64_t /* start_timestap */, const int64_t /* end_timstap */) {
    return;
  }
  void getStatisTask(std::vector<StatisTask> & /* _return */) {
    return;
  }
  bool addStatisTask(const std::string& /* start_camera_id */, const std::string& /* end_camera_id */) {
    bool _return = false;
    return _return;
  }
  bool deleteStatisTask(const std::string& /* start_camera_id */, const std::string& /* end_camera_id */) {
    bool _return = false;
    return _return;
  }
  void getAlarmArea(Area& /* _return */, const std::string& /* camera_id */) {
    return;
  }
  bool setAlarmArea(const std::string& /* camera_id */, const AreaType::type /* area_type */, const std::vector<Point> & /* area */) {
    bool _return = false;
    return _return;
  }
  void searchSnap(std::vector<SearchFace> & /* _return */, const std::string& /* oid */, const std::string& /* face_img */, const std::string& /* camera_id */, const int32_t /* topk */, const double /* thresh */, const int64_t /* start_timestap */, const int64_t /* end_timstap */) {
    return;
  }
  void pagenateSearchFaceSnap(PageSnapFaceHis& /* _return */, const int32_t /* page */, const int32_t /* num */, const std::string& /* oid */, const std::string& /* face_img */, const std::string& /* camera_id */, const int32_t /* topk */, const double /* thresh */, const int64_t /* start_timestap */, const int64_t /* end_timstap */) {
    return;
  }
  void gnerateFaceTrace(std::vector<SearchFace> & /* _return */, const std::string& /* oid */, const std::string& /* face_img */, const double /* thresh */, const int64_t /* start_timestap */, const int64_t /* end_timstap */) {
    return;
  }
  void generateFaceLink(FaceLink& /* _return */, const std::string& /* oid */, const std::string& /* face_img */, const int64_t /* start_timestap */, const int64_t /* end_timestap */) {
    return;
  }
};

typedef struct _FaceServ_getFacePic_args__isset {
  _FaceServ_getFacePic_args__isset() : oid(false) {}
  bool oid :1;
} _FaceServ_getFacePic_args__isset;

class FaceServ_getFacePic_args {
 public:

  FaceServ_getFacePic_args(const FaceServ_getFacePic_args&);
  FaceServ_getFacePic_args& operator=(const FaceServ_getFacePic_args&);
  FaceServ_getFacePic_args() : oid() {
  }

  virtual ~FaceServ_getFacePic_args() throw();
  std::string oid;

  _FaceServ_getFacePic_args__isset __isset;

  void __set_oid(const std::string& val);

  bool operator == (const FaceServ_getFacePic_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getFacePic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getFacePic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_getFacePic_pargs {
 public:


  virtual ~FaceServ_getFacePic_pargs() throw();
  const std::string* oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getFacePic_result__isset {
  _FaceServ_getFacePic_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_getFacePic_result__isset;

class FaceServ_getFacePic_result {
 public:

  FaceServ_getFacePic_result(const FaceServ_getFacePic_result&);
  FaceServ_getFacePic_result& operator=(const FaceServ_getFacePic_result&);
  FaceServ_getFacePic_result() : success() {
  }

  virtual ~FaceServ_getFacePic_result() throw();
  std::string success;

  _FaceServ_getFacePic_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FaceServ_getFacePic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getFacePic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getFacePic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getFacePic_presult__isset {
  _FaceServ_getFacePic_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_getFacePic_presult__isset;

class FaceServ_getFacePic_presult {
 public:


  virtual ~FaceServ_getFacePic_presult() throw();
  std::string* success;

  _FaceServ_getFacePic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_getScenePic_args__isset {
  _FaceServ_getScenePic_args__isset() : oid(false) {}
  bool oid :1;
} _FaceServ_getScenePic_args__isset;

class FaceServ_getScenePic_args {
 public:

  FaceServ_getScenePic_args(const FaceServ_getScenePic_args&);
  FaceServ_getScenePic_args& operator=(const FaceServ_getScenePic_args&);
  FaceServ_getScenePic_args() : oid() {
  }

  virtual ~FaceServ_getScenePic_args() throw();
  std::string oid;

  _FaceServ_getScenePic_args__isset __isset;

  void __set_oid(const std::string& val);

  bool operator == (const FaceServ_getScenePic_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getScenePic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getScenePic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_getScenePic_pargs {
 public:


  virtual ~FaceServ_getScenePic_pargs() throw();
  const std::string* oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getScenePic_result__isset {
  _FaceServ_getScenePic_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_getScenePic_result__isset;

class FaceServ_getScenePic_result {
 public:

  FaceServ_getScenePic_result(const FaceServ_getScenePic_result&);
  FaceServ_getScenePic_result& operator=(const FaceServ_getScenePic_result&);
  FaceServ_getScenePic_result() {
  }

  virtual ~FaceServ_getScenePic_result() throw();
  ScenePic success;

  _FaceServ_getScenePic_result__isset __isset;

  void __set_success(const ScenePic& val);

  bool operator == (const FaceServ_getScenePic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getScenePic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getScenePic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getScenePic_presult__isset {
  _FaceServ_getScenePic_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_getScenePic_presult__isset;

class FaceServ_getScenePic_presult {
 public:


  virtual ~FaceServ_getScenePic_presult() throw();
  ScenePic* success;

  _FaceServ_getScenePic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_getAlarmScenePic_args__isset {
  _FaceServ_getAlarmScenePic_args__isset() : oid(false) {}
  bool oid :1;
} _FaceServ_getAlarmScenePic_args__isset;

class FaceServ_getAlarmScenePic_args {
 public:

  FaceServ_getAlarmScenePic_args(const FaceServ_getAlarmScenePic_args&);
  FaceServ_getAlarmScenePic_args& operator=(const FaceServ_getAlarmScenePic_args&);
  FaceServ_getAlarmScenePic_args() : oid() {
  }

  virtual ~FaceServ_getAlarmScenePic_args() throw();
  std::string oid;

  _FaceServ_getAlarmScenePic_args__isset __isset;

  void __set_oid(const std::string& val);

  bool operator == (const FaceServ_getAlarmScenePic_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getAlarmScenePic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getAlarmScenePic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_getAlarmScenePic_pargs {
 public:


  virtual ~FaceServ_getAlarmScenePic_pargs() throw();
  const std::string* oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getAlarmScenePic_result__isset {
  _FaceServ_getAlarmScenePic_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_getAlarmScenePic_result__isset;

class FaceServ_getAlarmScenePic_result {
 public:

  FaceServ_getAlarmScenePic_result(const FaceServ_getAlarmScenePic_result&);
  FaceServ_getAlarmScenePic_result& operator=(const FaceServ_getAlarmScenePic_result&);
  FaceServ_getAlarmScenePic_result() {
  }

  virtual ~FaceServ_getAlarmScenePic_result() throw();
  ScenePic success;

  _FaceServ_getAlarmScenePic_result__isset __isset;

  void __set_success(const ScenePic& val);

  bool operator == (const FaceServ_getAlarmScenePic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getAlarmScenePic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getAlarmScenePic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getAlarmScenePic_presult__isset {
  _FaceServ_getAlarmScenePic_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_getAlarmScenePic_presult__isset;

class FaceServ_getAlarmScenePic_presult {
 public:


  virtual ~FaceServ_getAlarmScenePic_presult() throw();
  ScenePic* success;

  _FaceServ_getAlarmScenePic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_snapHistory_args__isset {
  _FaceServ_snapHistory_args__isset() : cameraid(false), start_timestap(false), end_timstap(false) {}
  bool cameraid :1;
  bool start_timestap :1;
  bool end_timstap :1;
} _FaceServ_snapHistory_args__isset;

class FaceServ_snapHistory_args {
 public:

  FaceServ_snapHistory_args(const FaceServ_snapHistory_args&);
  FaceServ_snapHistory_args& operator=(const FaceServ_snapHistory_args&);
  FaceServ_snapHistory_args() : cameraid(), start_timestap(0), end_timstap(0) {
  }

  virtual ~FaceServ_snapHistory_args() throw();
  std::string cameraid;
  int64_t start_timestap;
  int64_t end_timstap;

  _FaceServ_snapHistory_args__isset __isset;

  void __set_cameraid(const std::string& val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timstap(const int64_t val);

  bool operator == (const FaceServ_snapHistory_args & rhs) const
  {
    if (!(cameraid == rhs.cameraid))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timstap == rhs.end_timstap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_snapHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_snapHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_snapHistory_pargs {
 public:


  virtual ~FaceServ_snapHistory_pargs() throw();
  const std::string* cameraid;
  const int64_t* start_timestap;
  const int64_t* end_timstap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_snapHistory_result__isset {
  _FaceServ_snapHistory_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_snapHistory_result__isset;

class FaceServ_snapHistory_result {
 public:

  FaceServ_snapHistory_result(const FaceServ_snapHistory_result&);
  FaceServ_snapHistory_result& operator=(const FaceServ_snapHistory_result&);
  FaceServ_snapHistory_result() {
  }

  virtual ~FaceServ_snapHistory_result() throw();
  std::vector<SnapFaceHis>  success;

  _FaceServ_snapHistory_result__isset __isset;

  void __set_success(const std::vector<SnapFaceHis> & val);

  bool operator == (const FaceServ_snapHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_snapHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_snapHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_snapHistory_presult__isset {
  _FaceServ_snapHistory_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_snapHistory_presult__isset;

class FaceServ_snapHistory_presult {
 public:


  virtual ~FaceServ_snapHistory_presult() throw();
  std::vector<SnapFaceHis> * success;

  _FaceServ_snapHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_pagenateSnapHistory_args__isset {
  _FaceServ_pagenateSnapHistory_args__isset() : page(false), num(false), cameraid(false), start_timestap(false), end_timstap(false) {}
  bool page :1;
  bool num :1;
  bool cameraid :1;
  bool start_timestap :1;
  bool end_timstap :1;
} _FaceServ_pagenateSnapHistory_args__isset;

class FaceServ_pagenateSnapHistory_args {
 public:

  FaceServ_pagenateSnapHistory_args(const FaceServ_pagenateSnapHistory_args&);
  FaceServ_pagenateSnapHistory_args& operator=(const FaceServ_pagenateSnapHistory_args&);
  FaceServ_pagenateSnapHistory_args() : page(0), num(0), cameraid(), start_timestap(0), end_timstap(0) {
  }

  virtual ~FaceServ_pagenateSnapHistory_args() throw();
  int32_t page;
  int32_t num;
  std::string cameraid;
  int64_t start_timestap;
  int64_t end_timstap;

  _FaceServ_pagenateSnapHistory_args__isset __isset;

  void __set_page(const int32_t val);

  void __set_num(const int32_t val);

  void __set_cameraid(const std::string& val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timstap(const int64_t val);

  bool operator == (const FaceServ_pagenateSnapHistory_args & rhs) const
  {
    if (!(page == rhs.page))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(cameraid == rhs.cameraid))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timstap == rhs.end_timstap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_pagenateSnapHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_pagenateSnapHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_pagenateSnapHistory_pargs {
 public:


  virtual ~FaceServ_pagenateSnapHistory_pargs() throw();
  const int32_t* page;
  const int32_t* num;
  const std::string* cameraid;
  const int64_t* start_timestap;
  const int64_t* end_timstap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_pagenateSnapHistory_result__isset {
  _FaceServ_pagenateSnapHistory_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_pagenateSnapHistory_result__isset;

class FaceServ_pagenateSnapHistory_result {
 public:

  FaceServ_pagenateSnapHistory_result(const FaceServ_pagenateSnapHistory_result&);
  FaceServ_pagenateSnapHistory_result& operator=(const FaceServ_pagenateSnapHistory_result&);
  FaceServ_pagenateSnapHistory_result() {
  }

  virtual ~FaceServ_pagenateSnapHistory_result() throw();
  PagedSnapFaceHis success;

  _FaceServ_pagenateSnapHistory_result__isset __isset;

  void __set_success(const PagedSnapFaceHis& val);

  bool operator == (const FaceServ_pagenateSnapHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_pagenateSnapHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_pagenateSnapHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_pagenateSnapHistory_presult__isset {
  _FaceServ_pagenateSnapHistory_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_pagenateSnapHistory_presult__isset;

class FaceServ_pagenateSnapHistory_presult {
 public:


  virtual ~FaceServ_pagenateSnapHistory_presult() throw();
  PagedSnapFaceHis* success;

  _FaceServ_pagenateSnapHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_pagenateAlarmHistory_args__isset {
  _FaceServ_pagenateAlarmHistory_args__isset() : page(false), num(false), camera_id(false), alarm_type(false), start_timestap(false), end_timstap(false) {}
  bool page :1;
  bool num :1;
  bool camera_id :1;
  bool alarm_type :1;
  bool start_timestap :1;
  bool end_timstap :1;
} _FaceServ_pagenateAlarmHistory_args__isset;

class FaceServ_pagenateAlarmHistory_args {
 public:

  FaceServ_pagenateAlarmHistory_args(const FaceServ_pagenateAlarmHistory_args&);
  FaceServ_pagenateAlarmHistory_args& operator=(const FaceServ_pagenateAlarmHistory_args&);
  FaceServ_pagenateAlarmHistory_args() : page(0), num(0), camera_id(), alarm_type(), start_timestap(0), end_timstap(0) {
  }

  virtual ~FaceServ_pagenateAlarmHistory_args() throw();
  int32_t page;
  int32_t num;
  std::string camera_id;
  std::string alarm_type;
  int64_t start_timestap;
  int64_t end_timstap;

  _FaceServ_pagenateAlarmHistory_args__isset __isset;

  void __set_page(const int32_t val);

  void __set_num(const int32_t val);

  void __set_camera_id(const std::string& val);

  void __set_alarm_type(const std::string& val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timstap(const int64_t val);

  bool operator == (const FaceServ_pagenateAlarmHistory_args & rhs) const
  {
    if (!(page == rhs.page))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(alarm_type == rhs.alarm_type))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timstap == rhs.end_timstap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_pagenateAlarmHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_pagenateAlarmHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_pagenateAlarmHistory_pargs {
 public:


  virtual ~FaceServ_pagenateAlarmHistory_pargs() throw();
  const int32_t* page;
  const int32_t* num;
  const std::string* camera_id;
  const std::string* alarm_type;
  const int64_t* start_timestap;
  const int64_t* end_timstap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_pagenateAlarmHistory_result__isset {
  _FaceServ_pagenateAlarmHistory_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_pagenateAlarmHistory_result__isset;

class FaceServ_pagenateAlarmHistory_result {
 public:

  FaceServ_pagenateAlarmHistory_result(const FaceServ_pagenateAlarmHistory_result&);
  FaceServ_pagenateAlarmHistory_result& operator=(const FaceServ_pagenateAlarmHistory_result&);
  FaceServ_pagenateAlarmHistory_result() {
  }

  virtual ~FaceServ_pagenateAlarmHistory_result() throw();
  PagedAlarmHis success;

  _FaceServ_pagenateAlarmHistory_result__isset __isset;

  void __set_success(const PagedAlarmHis& val);

  bool operator == (const FaceServ_pagenateAlarmHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_pagenateAlarmHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_pagenateAlarmHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_pagenateAlarmHistory_presult__isset {
  _FaceServ_pagenateAlarmHistory_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_pagenateAlarmHistory_presult__isset;

class FaceServ_pagenateAlarmHistory_presult {
 public:


  virtual ~FaceServ_pagenateAlarmHistory_presult() throw();
  PagedAlarmHis* success;

  _FaceServ_pagenateAlarmHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FaceServ_getStatisTask_args {
 public:

  FaceServ_getStatisTask_args(const FaceServ_getStatisTask_args&);
  FaceServ_getStatisTask_args& operator=(const FaceServ_getStatisTask_args&);
  FaceServ_getStatisTask_args() {
  }

  virtual ~FaceServ_getStatisTask_args() throw();

  bool operator == (const FaceServ_getStatisTask_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FaceServ_getStatisTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getStatisTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_getStatisTask_pargs {
 public:


  virtual ~FaceServ_getStatisTask_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getStatisTask_result__isset {
  _FaceServ_getStatisTask_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_getStatisTask_result__isset;

class FaceServ_getStatisTask_result {
 public:

  FaceServ_getStatisTask_result(const FaceServ_getStatisTask_result&);
  FaceServ_getStatisTask_result& operator=(const FaceServ_getStatisTask_result&);
  FaceServ_getStatisTask_result() {
  }

  virtual ~FaceServ_getStatisTask_result() throw();
  std::vector<StatisTask>  success;

  _FaceServ_getStatisTask_result__isset __isset;

  void __set_success(const std::vector<StatisTask> & val);

  bool operator == (const FaceServ_getStatisTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getStatisTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getStatisTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getStatisTask_presult__isset {
  _FaceServ_getStatisTask_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_getStatisTask_presult__isset;

class FaceServ_getStatisTask_presult {
 public:


  virtual ~FaceServ_getStatisTask_presult() throw();
  std::vector<StatisTask> * success;

  _FaceServ_getStatisTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_addStatisTask_args__isset {
  _FaceServ_addStatisTask_args__isset() : start_camera_id(false), end_camera_id(false) {}
  bool start_camera_id :1;
  bool end_camera_id :1;
} _FaceServ_addStatisTask_args__isset;

class FaceServ_addStatisTask_args {
 public:

  FaceServ_addStatisTask_args(const FaceServ_addStatisTask_args&);
  FaceServ_addStatisTask_args& operator=(const FaceServ_addStatisTask_args&);
  FaceServ_addStatisTask_args() : start_camera_id(), end_camera_id() {
  }

  virtual ~FaceServ_addStatisTask_args() throw();
  std::string start_camera_id;
  std::string end_camera_id;

  _FaceServ_addStatisTask_args__isset __isset;

  void __set_start_camera_id(const std::string& val);

  void __set_end_camera_id(const std::string& val);

  bool operator == (const FaceServ_addStatisTask_args & rhs) const
  {
    if (!(start_camera_id == rhs.start_camera_id))
      return false;
    if (!(end_camera_id == rhs.end_camera_id))
      return false;
    return true;
  }
  bool operator != (const FaceServ_addStatisTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_addStatisTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_addStatisTask_pargs {
 public:


  virtual ~FaceServ_addStatisTask_pargs() throw();
  const std::string* start_camera_id;
  const std::string* end_camera_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_addStatisTask_result__isset {
  _FaceServ_addStatisTask_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_addStatisTask_result__isset;

class FaceServ_addStatisTask_result {
 public:

  FaceServ_addStatisTask_result(const FaceServ_addStatisTask_result&);
  FaceServ_addStatisTask_result& operator=(const FaceServ_addStatisTask_result&);
  FaceServ_addStatisTask_result() : success(0) {
  }

  virtual ~FaceServ_addStatisTask_result() throw();
  bool success;

  _FaceServ_addStatisTask_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FaceServ_addStatisTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_addStatisTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_addStatisTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_addStatisTask_presult__isset {
  _FaceServ_addStatisTask_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_addStatisTask_presult__isset;

class FaceServ_addStatisTask_presult {
 public:


  virtual ~FaceServ_addStatisTask_presult() throw();
  bool* success;

  _FaceServ_addStatisTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_deleteStatisTask_args__isset {
  _FaceServ_deleteStatisTask_args__isset() : start_camera_id(false), end_camera_id(false) {}
  bool start_camera_id :1;
  bool end_camera_id :1;
} _FaceServ_deleteStatisTask_args__isset;

class FaceServ_deleteStatisTask_args {
 public:

  FaceServ_deleteStatisTask_args(const FaceServ_deleteStatisTask_args&);
  FaceServ_deleteStatisTask_args& operator=(const FaceServ_deleteStatisTask_args&);
  FaceServ_deleteStatisTask_args() : start_camera_id(), end_camera_id() {
  }

  virtual ~FaceServ_deleteStatisTask_args() throw();
  std::string start_camera_id;
  std::string end_camera_id;

  _FaceServ_deleteStatisTask_args__isset __isset;

  void __set_start_camera_id(const std::string& val);

  void __set_end_camera_id(const std::string& val);

  bool operator == (const FaceServ_deleteStatisTask_args & rhs) const
  {
    if (!(start_camera_id == rhs.start_camera_id))
      return false;
    if (!(end_camera_id == rhs.end_camera_id))
      return false;
    return true;
  }
  bool operator != (const FaceServ_deleteStatisTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_deleteStatisTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_deleteStatisTask_pargs {
 public:


  virtual ~FaceServ_deleteStatisTask_pargs() throw();
  const std::string* start_camera_id;
  const std::string* end_camera_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_deleteStatisTask_result__isset {
  _FaceServ_deleteStatisTask_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_deleteStatisTask_result__isset;

class FaceServ_deleteStatisTask_result {
 public:

  FaceServ_deleteStatisTask_result(const FaceServ_deleteStatisTask_result&);
  FaceServ_deleteStatisTask_result& operator=(const FaceServ_deleteStatisTask_result&);
  FaceServ_deleteStatisTask_result() : success(0) {
  }

  virtual ~FaceServ_deleteStatisTask_result() throw();
  bool success;

  _FaceServ_deleteStatisTask_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FaceServ_deleteStatisTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_deleteStatisTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_deleteStatisTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_deleteStatisTask_presult__isset {
  _FaceServ_deleteStatisTask_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_deleteStatisTask_presult__isset;

class FaceServ_deleteStatisTask_presult {
 public:


  virtual ~FaceServ_deleteStatisTask_presult() throw();
  bool* success;

  _FaceServ_deleteStatisTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_getAlarmArea_args__isset {
  _FaceServ_getAlarmArea_args__isset() : camera_id(false) {}
  bool camera_id :1;
} _FaceServ_getAlarmArea_args__isset;

class FaceServ_getAlarmArea_args {
 public:

  FaceServ_getAlarmArea_args(const FaceServ_getAlarmArea_args&);
  FaceServ_getAlarmArea_args& operator=(const FaceServ_getAlarmArea_args&);
  FaceServ_getAlarmArea_args() : camera_id() {
  }

  virtual ~FaceServ_getAlarmArea_args() throw();
  std::string camera_id;

  _FaceServ_getAlarmArea_args__isset __isset;

  void __set_camera_id(const std::string& val);

  bool operator == (const FaceServ_getAlarmArea_args & rhs) const
  {
    if (!(camera_id == rhs.camera_id))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getAlarmArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getAlarmArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_getAlarmArea_pargs {
 public:


  virtual ~FaceServ_getAlarmArea_pargs() throw();
  const std::string* camera_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getAlarmArea_result__isset {
  _FaceServ_getAlarmArea_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_getAlarmArea_result__isset;

class FaceServ_getAlarmArea_result {
 public:

  FaceServ_getAlarmArea_result(const FaceServ_getAlarmArea_result&);
  FaceServ_getAlarmArea_result& operator=(const FaceServ_getAlarmArea_result&);
  FaceServ_getAlarmArea_result() {
  }

  virtual ~FaceServ_getAlarmArea_result() throw();
  Area success;

  _FaceServ_getAlarmArea_result__isset __isset;

  void __set_success(const Area& val);

  bool operator == (const FaceServ_getAlarmArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_getAlarmArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_getAlarmArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_getAlarmArea_presult__isset {
  _FaceServ_getAlarmArea_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_getAlarmArea_presult__isset;

class FaceServ_getAlarmArea_presult {
 public:


  virtual ~FaceServ_getAlarmArea_presult() throw();
  Area* success;

  _FaceServ_getAlarmArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_setAlarmArea_args__isset {
  _FaceServ_setAlarmArea_args__isset() : camera_id(false), area_type(false), area(false) {}
  bool camera_id :1;
  bool area_type :1;
  bool area :1;
} _FaceServ_setAlarmArea_args__isset;

class FaceServ_setAlarmArea_args {
 public:

  FaceServ_setAlarmArea_args(const FaceServ_setAlarmArea_args&);
  FaceServ_setAlarmArea_args& operator=(const FaceServ_setAlarmArea_args&);
  FaceServ_setAlarmArea_args() : camera_id(), area_type((AreaType::type)0) {
  }

  virtual ~FaceServ_setAlarmArea_args() throw();
  std::string camera_id;
  AreaType::type area_type;
  std::vector<Point>  area;

  _FaceServ_setAlarmArea_args__isset __isset;

  void __set_camera_id(const std::string& val);

  void __set_area_type(const AreaType::type val);

  void __set_area(const std::vector<Point> & val);

  bool operator == (const FaceServ_setAlarmArea_args & rhs) const
  {
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(area_type == rhs.area_type))
      return false;
    if (!(area == rhs.area))
      return false;
    return true;
  }
  bool operator != (const FaceServ_setAlarmArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_setAlarmArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_setAlarmArea_pargs {
 public:


  virtual ~FaceServ_setAlarmArea_pargs() throw();
  const std::string* camera_id;
  const AreaType::type* area_type;
  const std::vector<Point> * area;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_setAlarmArea_result__isset {
  _FaceServ_setAlarmArea_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_setAlarmArea_result__isset;

class FaceServ_setAlarmArea_result {
 public:

  FaceServ_setAlarmArea_result(const FaceServ_setAlarmArea_result&);
  FaceServ_setAlarmArea_result& operator=(const FaceServ_setAlarmArea_result&);
  FaceServ_setAlarmArea_result() : success(0) {
  }

  virtual ~FaceServ_setAlarmArea_result() throw();
  bool success;

  _FaceServ_setAlarmArea_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FaceServ_setAlarmArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_setAlarmArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_setAlarmArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_setAlarmArea_presult__isset {
  _FaceServ_setAlarmArea_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_setAlarmArea_presult__isset;

class FaceServ_setAlarmArea_presult {
 public:


  virtual ~FaceServ_setAlarmArea_presult() throw();
  bool* success;

  _FaceServ_setAlarmArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_searchSnap_args__isset {
  _FaceServ_searchSnap_args__isset() : oid(false), face_img(false), camera_id(false), topk(false), thresh(false), start_timestap(false), end_timstap(false) {}
  bool oid :1;
  bool face_img :1;
  bool camera_id :1;
  bool topk :1;
  bool thresh :1;
  bool start_timestap :1;
  bool end_timstap :1;
} _FaceServ_searchSnap_args__isset;

class FaceServ_searchSnap_args {
 public:

  FaceServ_searchSnap_args(const FaceServ_searchSnap_args&);
  FaceServ_searchSnap_args& operator=(const FaceServ_searchSnap_args&);
  FaceServ_searchSnap_args() : oid(), face_img(), camera_id(), topk(0), thresh(0), start_timestap(0), end_timstap(0) {
  }

  virtual ~FaceServ_searchSnap_args() throw();
  std::string oid;
  std::string face_img;
  std::string camera_id;
  int32_t topk;
  double thresh;
  int64_t start_timestap;
  int64_t end_timstap;

  _FaceServ_searchSnap_args__isset __isset;

  void __set_oid(const std::string& val);

  void __set_face_img(const std::string& val);

  void __set_camera_id(const std::string& val);

  void __set_topk(const int32_t val);

  void __set_thresh(const double val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timstap(const int64_t val);

  bool operator == (const FaceServ_searchSnap_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(face_img == rhs.face_img))
      return false;
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(topk == rhs.topk))
      return false;
    if (!(thresh == rhs.thresh))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timstap == rhs.end_timstap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_searchSnap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_searchSnap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_searchSnap_pargs {
 public:


  virtual ~FaceServ_searchSnap_pargs() throw();
  const std::string* oid;
  const std::string* face_img;
  const std::string* camera_id;
  const int32_t* topk;
  const double* thresh;
  const int64_t* start_timestap;
  const int64_t* end_timstap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_searchSnap_result__isset {
  _FaceServ_searchSnap_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_searchSnap_result__isset;

class FaceServ_searchSnap_result {
 public:

  FaceServ_searchSnap_result(const FaceServ_searchSnap_result&);
  FaceServ_searchSnap_result& operator=(const FaceServ_searchSnap_result&);
  FaceServ_searchSnap_result() {
  }

  virtual ~FaceServ_searchSnap_result() throw();
  std::vector<SearchFace>  success;

  _FaceServ_searchSnap_result__isset __isset;

  void __set_success(const std::vector<SearchFace> & val);

  bool operator == (const FaceServ_searchSnap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_searchSnap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_searchSnap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_searchSnap_presult__isset {
  _FaceServ_searchSnap_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_searchSnap_presult__isset;

class FaceServ_searchSnap_presult {
 public:


  virtual ~FaceServ_searchSnap_presult() throw();
  std::vector<SearchFace> * success;

  _FaceServ_searchSnap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_pagenateSearchFaceSnap_args__isset {
  _FaceServ_pagenateSearchFaceSnap_args__isset() : page(false), num(false), oid(false), face_img(false), camera_id(false), topk(false), thresh(false), start_timestap(false), end_timstap(false) {}
  bool page :1;
  bool num :1;
  bool oid :1;
  bool face_img :1;
  bool camera_id :1;
  bool topk :1;
  bool thresh :1;
  bool start_timestap :1;
  bool end_timstap :1;
} _FaceServ_pagenateSearchFaceSnap_args__isset;

class FaceServ_pagenateSearchFaceSnap_args {
 public:

  FaceServ_pagenateSearchFaceSnap_args(const FaceServ_pagenateSearchFaceSnap_args&);
  FaceServ_pagenateSearchFaceSnap_args& operator=(const FaceServ_pagenateSearchFaceSnap_args&);
  FaceServ_pagenateSearchFaceSnap_args() : page(0), num(0), oid(), face_img(), camera_id(), topk(0), thresh(0), start_timestap(0), end_timstap(0) {
  }

  virtual ~FaceServ_pagenateSearchFaceSnap_args() throw();
  int32_t page;
  int32_t num;
  std::string oid;
  std::string face_img;
  std::string camera_id;
  int32_t topk;
  double thresh;
  int64_t start_timestap;
  int64_t end_timstap;

  _FaceServ_pagenateSearchFaceSnap_args__isset __isset;

  void __set_page(const int32_t val);

  void __set_num(const int32_t val);

  void __set_oid(const std::string& val);

  void __set_face_img(const std::string& val);

  void __set_camera_id(const std::string& val);

  void __set_topk(const int32_t val);

  void __set_thresh(const double val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timstap(const int64_t val);

  bool operator == (const FaceServ_pagenateSearchFaceSnap_args & rhs) const
  {
    if (!(page == rhs.page))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(face_img == rhs.face_img))
      return false;
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(topk == rhs.topk))
      return false;
    if (!(thresh == rhs.thresh))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timstap == rhs.end_timstap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_pagenateSearchFaceSnap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_pagenateSearchFaceSnap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_pagenateSearchFaceSnap_pargs {
 public:


  virtual ~FaceServ_pagenateSearchFaceSnap_pargs() throw();
  const int32_t* page;
  const int32_t* num;
  const std::string* oid;
  const std::string* face_img;
  const std::string* camera_id;
  const int32_t* topk;
  const double* thresh;
  const int64_t* start_timestap;
  const int64_t* end_timstap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_pagenateSearchFaceSnap_result__isset {
  _FaceServ_pagenateSearchFaceSnap_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_pagenateSearchFaceSnap_result__isset;

class FaceServ_pagenateSearchFaceSnap_result {
 public:

  FaceServ_pagenateSearchFaceSnap_result(const FaceServ_pagenateSearchFaceSnap_result&);
  FaceServ_pagenateSearchFaceSnap_result& operator=(const FaceServ_pagenateSearchFaceSnap_result&);
  FaceServ_pagenateSearchFaceSnap_result() {
  }

  virtual ~FaceServ_pagenateSearchFaceSnap_result() throw();
  PageSnapFaceHis success;

  _FaceServ_pagenateSearchFaceSnap_result__isset __isset;

  void __set_success(const PageSnapFaceHis& val);

  bool operator == (const FaceServ_pagenateSearchFaceSnap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_pagenateSearchFaceSnap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_pagenateSearchFaceSnap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_pagenateSearchFaceSnap_presult__isset {
  _FaceServ_pagenateSearchFaceSnap_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_pagenateSearchFaceSnap_presult__isset;

class FaceServ_pagenateSearchFaceSnap_presult {
 public:


  virtual ~FaceServ_pagenateSearchFaceSnap_presult() throw();
  PageSnapFaceHis* success;

  _FaceServ_pagenateSearchFaceSnap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_gnerateFaceTrace_args__isset {
  _FaceServ_gnerateFaceTrace_args__isset() : oid(false), face_img(false), thresh(false), start_timestap(false), end_timstap(false) {}
  bool oid :1;
  bool face_img :1;
  bool thresh :1;
  bool start_timestap :1;
  bool end_timstap :1;
} _FaceServ_gnerateFaceTrace_args__isset;

class FaceServ_gnerateFaceTrace_args {
 public:

  FaceServ_gnerateFaceTrace_args(const FaceServ_gnerateFaceTrace_args&);
  FaceServ_gnerateFaceTrace_args& operator=(const FaceServ_gnerateFaceTrace_args&);
  FaceServ_gnerateFaceTrace_args() : oid(), face_img(), thresh(0), start_timestap(0), end_timstap(0) {
  }

  virtual ~FaceServ_gnerateFaceTrace_args() throw();
  std::string oid;
  std::string face_img;
  double thresh;
  int64_t start_timestap;
  int64_t end_timstap;

  _FaceServ_gnerateFaceTrace_args__isset __isset;

  void __set_oid(const std::string& val);

  void __set_face_img(const std::string& val);

  void __set_thresh(const double val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timstap(const int64_t val);

  bool operator == (const FaceServ_gnerateFaceTrace_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(face_img == rhs.face_img))
      return false;
    if (!(thresh == rhs.thresh))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timstap == rhs.end_timstap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_gnerateFaceTrace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_gnerateFaceTrace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_gnerateFaceTrace_pargs {
 public:


  virtual ~FaceServ_gnerateFaceTrace_pargs() throw();
  const std::string* oid;
  const std::string* face_img;
  const double* thresh;
  const int64_t* start_timestap;
  const int64_t* end_timstap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_gnerateFaceTrace_result__isset {
  _FaceServ_gnerateFaceTrace_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_gnerateFaceTrace_result__isset;

class FaceServ_gnerateFaceTrace_result {
 public:

  FaceServ_gnerateFaceTrace_result(const FaceServ_gnerateFaceTrace_result&);
  FaceServ_gnerateFaceTrace_result& operator=(const FaceServ_gnerateFaceTrace_result&);
  FaceServ_gnerateFaceTrace_result() {
  }

  virtual ~FaceServ_gnerateFaceTrace_result() throw();
  std::vector<SearchFace>  success;

  _FaceServ_gnerateFaceTrace_result__isset __isset;

  void __set_success(const std::vector<SearchFace> & val);

  bool operator == (const FaceServ_gnerateFaceTrace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_gnerateFaceTrace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_gnerateFaceTrace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_gnerateFaceTrace_presult__isset {
  _FaceServ_gnerateFaceTrace_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_gnerateFaceTrace_presult__isset;

class FaceServ_gnerateFaceTrace_presult {
 public:


  virtual ~FaceServ_gnerateFaceTrace_presult() throw();
  std::vector<SearchFace> * success;

  _FaceServ_gnerateFaceTrace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FaceServ_generateFaceLink_args__isset {
  _FaceServ_generateFaceLink_args__isset() : oid(false), face_img(false), start_timestap(false), end_timestap(false) {}
  bool oid :1;
  bool face_img :1;
  bool start_timestap :1;
  bool end_timestap :1;
} _FaceServ_generateFaceLink_args__isset;

class FaceServ_generateFaceLink_args {
 public:

  FaceServ_generateFaceLink_args(const FaceServ_generateFaceLink_args&);
  FaceServ_generateFaceLink_args& operator=(const FaceServ_generateFaceLink_args&);
  FaceServ_generateFaceLink_args() : oid(), face_img(), start_timestap(0), end_timestap(0) {
  }

  virtual ~FaceServ_generateFaceLink_args() throw();
  std::string oid;
  std::string face_img;
  int64_t start_timestap;
  int64_t end_timestap;

  _FaceServ_generateFaceLink_args__isset __isset;

  void __set_oid(const std::string& val);

  void __set_face_img(const std::string& val);

  void __set_start_timestap(const int64_t val);

  void __set_end_timestap(const int64_t val);

  bool operator == (const FaceServ_generateFaceLink_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(face_img == rhs.face_img))
      return false;
    if (!(start_timestap == rhs.start_timestap))
      return false;
    if (!(end_timestap == rhs.end_timestap))
      return false;
    return true;
  }
  bool operator != (const FaceServ_generateFaceLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_generateFaceLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceServ_generateFaceLink_pargs {
 public:


  virtual ~FaceServ_generateFaceLink_pargs() throw();
  const std::string* oid;
  const std::string* face_img;
  const int64_t* start_timestap;
  const int64_t* end_timestap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_generateFaceLink_result__isset {
  _FaceServ_generateFaceLink_result__isset() : success(false) {}
  bool success :1;
} _FaceServ_generateFaceLink_result__isset;

class FaceServ_generateFaceLink_result {
 public:

  FaceServ_generateFaceLink_result(const FaceServ_generateFaceLink_result&);
  FaceServ_generateFaceLink_result& operator=(const FaceServ_generateFaceLink_result&);
  FaceServ_generateFaceLink_result() {
  }

  virtual ~FaceServ_generateFaceLink_result() throw();
  FaceLink success;

  _FaceServ_generateFaceLink_result__isset __isset;

  void __set_success(const FaceLink& val);

  bool operator == (const FaceServ_generateFaceLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceServ_generateFaceLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceServ_generateFaceLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceServ_generateFaceLink_presult__isset {
  _FaceServ_generateFaceLink_presult__isset() : success(false) {}
  bool success :1;
} _FaceServ_generateFaceLink_presult__isset;

class FaceServ_generateFaceLink_presult {
 public:


  virtual ~FaceServ_generateFaceLink_presult() throw();
  FaceLink* success;

  _FaceServ_generateFaceLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FaceServClient : virtual public FaceServIf {
 public:
  FaceServClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FaceServClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFacePic(std::string& _return, const std::string& oid);
  void send_getFacePic(const std::string& oid);
  void recv_getFacePic(std::string& _return);
  void getScenePic(ScenePic& _return, const std::string& oid);
  void send_getScenePic(const std::string& oid);
  void recv_getScenePic(ScenePic& _return);
  void getAlarmScenePic(ScenePic& _return, const std::string& oid);
  void send_getAlarmScenePic(const std::string& oid);
  void recv_getAlarmScenePic(ScenePic& _return);
  void snapHistory(std::vector<SnapFaceHis> & _return, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  void send_snapHistory(const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  void recv_snapHistory(std::vector<SnapFaceHis> & _return);
  void pagenateSnapHistory(PagedSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  void send_pagenateSnapHistory(const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  void recv_pagenateSnapHistory(PagedSnapFaceHis& _return);
  void pagenateAlarmHistory(PagedAlarmHis& _return, const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap);
  void send_pagenateAlarmHistory(const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap);
  void recv_pagenateAlarmHistory(PagedAlarmHis& _return);
  void getStatisTask(std::vector<StatisTask> & _return);
  void send_getStatisTask();
  void recv_getStatisTask(std::vector<StatisTask> & _return);
  bool addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  void send_addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  bool recv_addStatisTask();
  bool deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  void send_deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  bool recv_deleteStatisTask();
  void getAlarmArea(Area& _return, const std::string& camera_id);
  void send_getAlarmArea(const std::string& camera_id);
  void recv_getAlarmArea(Area& _return);
  bool setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area);
  void send_setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area);
  bool recv_setAlarmArea();
  void searchSnap(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void send_searchSnap(const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void recv_searchSnap(std::vector<SearchFace> & _return);
  void pagenateSearchFaceSnap(PageSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void send_pagenateSearchFaceSnap(const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void recv_pagenateSearchFaceSnap(PageSnapFaceHis& _return);
  void gnerateFaceTrace(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void send_gnerateFaceTrace(const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void recv_gnerateFaceTrace(std::vector<SearchFace> & _return);
  void generateFaceLink(FaceLink& _return, const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap);
  void send_generateFaceLink(const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap);
  void recv_generateFaceLink(FaceLink& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FaceServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FaceServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FaceServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getFacePic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScenePic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAlarmScenePic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_snapHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pagenateSnapHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pagenateAlarmHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatisTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addStatisTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteStatisTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAlarmArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAlarmArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchSnap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pagenateSearchFaceSnap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_gnerateFaceTrace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generateFaceLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FaceServProcessor(::apache::thrift::stdcxx::shared_ptr<FaceServIf> iface) :
    iface_(iface) {
    processMap_["getFacePic"] = &FaceServProcessor::process_getFacePic;
    processMap_["getScenePic"] = &FaceServProcessor::process_getScenePic;
    processMap_["getAlarmScenePic"] = &FaceServProcessor::process_getAlarmScenePic;
    processMap_["snapHistory"] = &FaceServProcessor::process_snapHistory;
    processMap_["pagenateSnapHistory"] = &FaceServProcessor::process_pagenateSnapHistory;
    processMap_["pagenateAlarmHistory"] = &FaceServProcessor::process_pagenateAlarmHistory;
    processMap_["getStatisTask"] = &FaceServProcessor::process_getStatisTask;
    processMap_["addStatisTask"] = &FaceServProcessor::process_addStatisTask;
    processMap_["deleteStatisTask"] = &FaceServProcessor::process_deleteStatisTask;
    processMap_["getAlarmArea"] = &FaceServProcessor::process_getAlarmArea;
    processMap_["setAlarmArea"] = &FaceServProcessor::process_setAlarmArea;
    processMap_["searchSnap"] = &FaceServProcessor::process_searchSnap;
    processMap_["pagenateSearchFaceSnap"] = &FaceServProcessor::process_pagenateSearchFaceSnap;
    processMap_["gnerateFaceTrace"] = &FaceServProcessor::process_gnerateFaceTrace;
    processMap_["generateFaceLink"] = &FaceServProcessor::process_generateFaceLink;
  }

  virtual ~FaceServProcessor() {}
};

class FaceServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FaceServProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FaceServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FaceServIfFactory > handlerFactory_;
};

class FaceServMultiface : virtual public FaceServIf {
 public:
  FaceServMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FaceServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FaceServMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FaceServIf> > ifaces_;
  FaceServMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FaceServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getFacePic(std::string& _return, const std::string& oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFacePic(_return, oid);
    }
    ifaces_[i]->getFacePic(_return, oid);
    return;
  }

  void getScenePic(ScenePic& _return, const std::string& oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScenePic(_return, oid);
    }
    ifaces_[i]->getScenePic(_return, oid);
    return;
  }

  void getAlarmScenePic(ScenePic& _return, const std::string& oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAlarmScenePic(_return, oid);
    }
    ifaces_[i]->getAlarmScenePic(_return, oid);
    return;
  }

  void snapHistory(std::vector<SnapFaceHis> & _return, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->snapHistory(_return, cameraid, start_timestap, end_timstap);
    }
    ifaces_[i]->snapHistory(_return, cameraid, start_timestap, end_timstap);
    return;
  }

  void pagenateSnapHistory(PagedSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pagenateSnapHistory(_return, page, num, cameraid, start_timestap, end_timstap);
    }
    ifaces_[i]->pagenateSnapHistory(_return, page, num, cameraid, start_timestap, end_timstap);
    return;
  }

  void pagenateAlarmHistory(PagedAlarmHis& _return, const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pagenateAlarmHistory(_return, page, num, camera_id, alarm_type, start_timestap, end_timstap);
    }
    ifaces_[i]->pagenateAlarmHistory(_return, page, num, camera_id, alarm_type, start_timestap, end_timstap);
    return;
  }

  void getStatisTask(std::vector<StatisTask> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatisTask(_return);
    }
    ifaces_[i]->getStatisTask(_return);
    return;
  }

  bool addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addStatisTask(start_camera_id, end_camera_id);
    }
    return ifaces_[i]->addStatisTask(start_camera_id, end_camera_id);
  }

  bool deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteStatisTask(start_camera_id, end_camera_id);
    }
    return ifaces_[i]->deleteStatisTask(start_camera_id, end_camera_id);
  }

  void getAlarmArea(Area& _return, const std::string& camera_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAlarmArea(_return, camera_id);
    }
    ifaces_[i]->getAlarmArea(_return, camera_id);
    return;
  }

  bool setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAlarmArea(camera_id, area_type, area);
    }
    return ifaces_[i]->setAlarmArea(camera_id, area_type, area);
  }

  void searchSnap(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchSnap(_return, oid, face_img, camera_id, topk, thresh, start_timestap, end_timstap);
    }
    ifaces_[i]->searchSnap(_return, oid, face_img, camera_id, topk, thresh, start_timestap, end_timstap);
    return;
  }

  void pagenateSearchFaceSnap(PageSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pagenateSearchFaceSnap(_return, page, num, oid, face_img, camera_id, topk, thresh, start_timestap, end_timstap);
    }
    ifaces_[i]->pagenateSearchFaceSnap(_return, page, num, oid, face_img, camera_id, topk, thresh, start_timestap, end_timstap);
    return;
  }

  void gnerateFaceTrace(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->gnerateFaceTrace(_return, oid, face_img, thresh, start_timestap, end_timstap);
    }
    ifaces_[i]->gnerateFaceTrace(_return, oid, face_img, thresh, start_timestap, end_timstap);
    return;
  }

  void generateFaceLink(FaceLink& _return, const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generateFaceLink(_return, oid, face_img, start_timestap, end_timestap);
    }
    ifaces_[i]->generateFaceLink(_return, oid, face_img, start_timestap, end_timestap);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FaceServConcurrentClient : virtual public FaceServIf {
 public:
  FaceServConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FaceServConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFacePic(std::string& _return, const std::string& oid);
  int32_t send_getFacePic(const std::string& oid);
  void recv_getFacePic(std::string& _return, const int32_t seqid);
  void getScenePic(ScenePic& _return, const std::string& oid);
  int32_t send_getScenePic(const std::string& oid);
  void recv_getScenePic(ScenePic& _return, const int32_t seqid);
  void getAlarmScenePic(ScenePic& _return, const std::string& oid);
  int32_t send_getAlarmScenePic(const std::string& oid);
  void recv_getAlarmScenePic(ScenePic& _return, const int32_t seqid);
  void snapHistory(std::vector<SnapFaceHis> & _return, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  int32_t send_snapHistory(const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  void recv_snapHistory(std::vector<SnapFaceHis> & _return, const int32_t seqid);
  void pagenateSnapHistory(PagedSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  int32_t send_pagenateSnapHistory(const int32_t page, const int32_t num, const std::string& cameraid, const int64_t start_timestap, const int64_t end_timstap);
  void recv_pagenateSnapHistory(PagedSnapFaceHis& _return, const int32_t seqid);
  void pagenateAlarmHistory(PagedAlarmHis& _return, const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap);
  int32_t send_pagenateAlarmHistory(const int32_t page, const int32_t num, const std::string& camera_id, const std::string& alarm_type, const int64_t start_timestap, const int64_t end_timstap);
  void recv_pagenateAlarmHistory(PagedAlarmHis& _return, const int32_t seqid);
  void getStatisTask(std::vector<StatisTask> & _return);
  int32_t send_getStatisTask();
  void recv_getStatisTask(std::vector<StatisTask> & _return, const int32_t seqid);
  bool addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  int32_t send_addStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  bool recv_addStatisTask(const int32_t seqid);
  bool deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  int32_t send_deleteStatisTask(const std::string& start_camera_id, const std::string& end_camera_id);
  bool recv_deleteStatisTask(const int32_t seqid);
  void getAlarmArea(Area& _return, const std::string& camera_id);
  int32_t send_getAlarmArea(const std::string& camera_id);
  void recv_getAlarmArea(Area& _return, const int32_t seqid);
  bool setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area);
  int32_t send_setAlarmArea(const std::string& camera_id, const AreaType::type area_type, const std::vector<Point> & area);
  bool recv_setAlarmArea(const int32_t seqid);
  void searchSnap(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  int32_t send_searchSnap(const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void recv_searchSnap(std::vector<SearchFace> & _return, const int32_t seqid);
  void pagenateSearchFaceSnap(PageSnapFaceHis& _return, const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  int32_t send_pagenateSearchFaceSnap(const int32_t page, const int32_t num, const std::string& oid, const std::string& face_img, const std::string& camera_id, const int32_t topk, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void recv_pagenateSearchFaceSnap(PageSnapFaceHis& _return, const int32_t seqid);
  void gnerateFaceTrace(std::vector<SearchFace> & _return, const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  int32_t send_gnerateFaceTrace(const std::string& oid, const std::string& face_img, const double thresh, const int64_t start_timestap, const int64_t end_timstap);
  void recv_gnerateFaceTrace(std::vector<SearchFace> & _return, const int32_t seqid);
  void generateFaceLink(FaceLink& _return, const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap);
  int32_t send_generateFaceLink(const std::string& oid, const std::string& face_img, const int64_t start_timestap, const int64_t end_timestap);
  void recv_generateFaceLink(FaceLink& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
